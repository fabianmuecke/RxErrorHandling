{% for type in types.protocols %}
{% for method in type.allMethods|annotated:"arity" %}
// sourcery:file:{{type.name|split:"."|join:"_"}}+{{method.callName}}+arity.swift
//
//  {{type.name|split:"."|join:"_"}}+{{method.callName}}+arity.swift
//  RxErrorHandling
//
//  Created by Fabian MÃ¼cke on 06.07.20.
//

import RxSwift

extension {{type.name}} {
    {% for numberOfParams in 2...method.annotations.arity %}
    {{method.accessLevel}} {% if method.isStatic%}static {% endif %}func {{method.callName}}
    <
    {% for currentParam in 1...numberOfParams %}
        O{{currentParam}}: {{type.name}}{% if forloop.last == false %}, {% endif %}
    {% endfor %}
    >
    (
        {% for currentParam in 1...numberOfParams %}
            _ source{{currentParam}}: O{{currentParam}},
        {% endfor %}
        resultSelector: @escaping ({% for currentParam in 1...numberOfParams %}O{{currentParam}}.Element{% if forloop.last == false %}, {% endif %}{% endfor %}) -> Element
    ) -> Treatable<Element, Failure>
    where
    {% for currentParam in 1...numberOfParams %}
        O{{currentParam}}.Element == Element, O{{currentParam}}.Failure == Failure{% if forloop.last == false %},{% endif %}
    {% endfor %} {
        Treatable(raw: Observable.{{method.callName}}(
            {% for currentParam in 1...numberOfParams %}
                source{{currentParam}}.asObservable(),
            {% endfor %}
            resultSelector: resultSelector
        ))
    }

    {{method.accessLevel}} {% if method.isStatic%}static {% endif %}func {{method.callName}}
    <
    {% for currentParam in 1...numberOfParams %}
        O{{currentParam}}: {{type.name}}{% if forloop.last == false %}, {% endif %}
    {% endfor %}
    >
    (
        {% for currentParam in 1...numberOfParams %}
            _ source{{currentParam}}: O{{currentParam}}{% if forloop.last == false %},{% endif %}
        {% endfor %}
    ) -> Treatable<({% for currentParam in 1...numberOfParams %}O{{currentParam}}.Element{% if forloop.last == false %}, {% endif %}{% endfor %}), Failure>
    where
    {% for currentParam in 1...numberOfParams %}
        O{{currentParam}}.Element == Element, O{{currentParam}}.Failure == Failure{% if forloop.last == false %},{% endif %}
    {% endfor %} {
        Treatable(raw: Observable.{{method.callName}}(
            {% for currentParam in 1...numberOfParams %}
                source{{currentParam}}.asObservable(){% if forloop.last == false %},{% endif %}
            {% endfor %}
        ))
    }
    
    {% endfor %}
}

// sourcery:end
{% endfor %}
{% endfor %}
